<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.Composite</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.Composite.Logging.ILoggerFacade">
            <summary>
            Defines a simple logger fa√ßade to be used by the Composite Application Library.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Logging.ILoggerFacade.Log(System.String,Microsoft.Practices.Composite.Logging.Category,Microsoft.Practices.Composite.Logging.Priority)">
            <summary>
            Write a new log entry with the specified category and priority.
            </summary>
            <param name="message">Message body to log.</param>
            <param name="category">Category of the entry.</param>
            <param name="priority">The priority of the entry.</param>
        </member>
        <member name="T:Microsoft.Practices.Composite.ListDictionary`2">
            <summary>
            A dictionary of lists.
            </summary>
            <typeparam name="TKey">The key to use for lists.</typeparam>
            <typeparam name="TValue">The type of the value held by lists.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.Add(`0)">
            <summary>
            If a list does not already exist, it will be created automatically.
            </summary>
            <param name="key">The key of the list that will hold the value.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value to a list with the given key. If a list does not already exist, 
            it will be created automatically.
            </summary>
            <param name="key">The key of the list that will hold the value.</param>
            <param name="value">The value to add to the list under the given key.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.Clear">
            <summary>
            Removes all entries in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the dictionary contains the specified value.
            </summary>
            <param name="value">The value to locate.</param>
            <returns>true if the dictionary contains the value in any list; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the given key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>true if the dictionary contains the given key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.FindAllValuesByKey(System.Predicate{`0})">
            <summary>
            Retrieves the all the elements from the list which have a key that matches the condition 
            defined by the specified predicate.
            </summary>
            <param name="keyFilter">The filter with the condition to use to filter lists by their key.</param>
            <returns>The elements that have a key that matches the condition defined by the specified predicate.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.FindAllValues(System.Predicate{`1})">
            <summary>
            Retrieves all the elements that match the condition defined by the specified predicate.
            </summary>
            <param name="valueFilter">The filter with the condition to use to filter values.</param>
            <returns>The elements that match the condition defined by the specified predicate.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.Remove(`0)">
            <summary>
            Removes a list by key.
            </summary>
            <param name="key">The key of the list to remove.</param>
            <returns><see langword="true" /> if the element was removed.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.Remove(`0,`1)">
            <summary>
            Removes a value from the list with the given key.
            </summary>
            <param name="key">The key of the list where the value exists.</param>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.Remove(`1)">
            <summary>
            Removes a value from all lists where it may be found.
            </summary>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#IList{TValue}}#Add(`0,System.Collections.Generic.IList{`1})">
            <summary>
            See <see cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#IList{TValue}}#TryGetValue(`0,System.Collections.Generic.IList{`1}@)">
            <summary>
            See <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#IList{TValue}}}#Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#IList{TValue}}}#Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#IList{TValue}}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#IList{TValue}}}#Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#IList{TValue}}}#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.ListDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.ListDictionary`2.Values">
            <summary>
            Gets a shallow copy of all values in all lists.
            </summary>
            <value>List of values.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.ListDictionary`2.Keys">
            <summary>
            Gets the list of keys in the dictionary.
            </summary>
            <value>Collection of keys.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.ListDictionary`2.Item(`0)">
            <summary>
            Gets or sets the list associated with the given key. The 
            access always succeeds, eventually returning an empty list.
            </summary>
            <param name="key">The key of the list to access.</param>
            <returns>The list associated with the key.</returns>
        </member>
        <member name="P:Microsoft.Practices.Composite.ListDictionary`2.Count">
            <summary>
            Gets the number of lists in the dictionary.
            </summary>
            <value>Value indicating the values count.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.ListDictionary`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#IList{TValue}}#Values">
            <summary>
            See <see cref="P:System.Collections.Generic.IDictionary`2.Values"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#IList{TValue}}}#IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Composite.IActiveAware">
            <summary>
            Interface that defines if the object instance is active
            and notifies when the activity changes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.IActiveAware.IsActive">
            <summary>
            Gets or sets a value indicating whether the object is active.
            </summary>
            <value><see langword="true" /> if the object is active; otherwise <see langword="false" />.</value>
        </member>
        <member name="E:Microsoft.Practices.Composite.IActiveAware.IsActiveChanged">
            <summary>
            Notifies that the value for <see cref="P:Microsoft.Practices.Composite.IActiveAware.IsActive"/> property has changed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.ModuleAttribute">
            <summary>
            Indicates that the class should be considered a named module using the
            provided module name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleAttribute.ModuleName">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleAttribute.StartupLoaded">
            <summary>
            Gets or sets a value indicating whether the module should be loaded at startup. 
            </summary>
            When <see langword="true"/> (default value), it indicates that this module should be loaded at startup. 
            Otherwise you should explicitly load this module on demand.
            <value>A <see cref="T:System.Boolean"/> value.</value>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.ConfigurationStore">
            <summary>
            Defines a store for the module metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ConfigurationStore.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.ConfigurationStore"/>. It uses the Application's directory as the base for looking config files.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ConfigurationStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.ConfigurationStore"/>.
            </summary>
            <param name="baseDirectory">The directory from which to start searching for the 
            configuration files.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ConfigurationStore.RetrieveModuleConfigurationSection">
            <summary>
            Gets the module configuration data.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.Composite.Modularity.ModulesConfigurationSection"/> instance.</returns>
        </member>
        <member name="T:Microsoft.Practices.Composite.IContainerFacade">
            <summary>
            Defines a simple Inversion of Control container fa√ßade
            to be used by the Composite Application Library.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.IContainerFacade.Resolve(System.Type)">
            <summary>
            Resolve an instance of the requested type from the container.
            </summary>
            <param name="type">The type of object to get from the container.</param>
            <returns>An instance of <paramref name="type"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.IContainerFacade.TryResolve(System.Type)">
            <summary>
            Tries to resolve an instance of the requested type from the container.
            </summary>
            <param name="type">The type of object to get from the container.</param>
            <returns>
            An instance of <paramref name="type"/>. 
            If the type cannot be resolved it will return a <see langword="null" /> value.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.StaticModuleEnumerator">
            <summary>
            Implements a <see cref="T:Microsoft.Practices.Composite.Modularity.IModuleEnumerator"/> that enumerates through module metadata defined explicitly.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.IModuleEnumerator">
            <summary>
            Defines an interface to enumerate a list of modules.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.IModuleEnumerator.GetModules">
            <summary>
            Gets a list of metadata that describes the modules.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.IModuleEnumerator.GetStartupLoadedModules">
            <summary>
            Gets a list of metadata that describes the modules that should be loaded at startup.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.IModuleEnumerator.GetModule(System.String)">
            <summary>
            Gets the metadata information of a module by its name.
            </summary>
            <param name="moduleName">The module's name.</param>
            <returns>A <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleInfo"/> associated with the <paramref name="moduleName"/> parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.StaticModuleEnumerator.GetModules">
            <summary>
            Gets a list of metadata information of the modules.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.StaticModuleEnumerator.GetStartupLoadedModules">
            <summary>
            Gets a list of metadata information of the modules that should be loaded at startup.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.StaticModuleEnumerator.GetModule(System.String)">
            <summary>
            Gets the metadata information of a module by its name.
            </summary>
            <param name="moduleName">The module's name.</param>
            <returns>A <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleInfo"/> associated with the <paramref name="moduleName"/> parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.StaticModuleEnumerator.AddModule(System.Type,System.String[])">
            <summary>
            Registers a module with the <see cref="T:Microsoft.Practices.Composite.Modularity.StaticModuleEnumerator"/>.
            </summary>
            <param name="moduleType">The module type. This class should implement <see cref="T:Microsoft.Practices.Composite.Modularity.IModule"/>.</param>
            <param name="dependsOn">The names of the modules that this module depends on, if any.</param>
            <returns>The same instance of <see cref="T:Microsoft.Practices.Composite.Modularity.StaticModuleEnumerator"/>.</returns>
            <remarks>The module name will be the Name of the type specified in <paramref name="moduleType"/>.</remarks>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.ModuleDependencyCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleDependencyConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleDependencyCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleDependencyCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleDependencyCollection.#ctor(Microsoft.Practices.Composite.Modularity.ModuleDependencyConfigurationElement[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleDependencyCollection"/>.
            </summary>
            <param name="dependencies">An array of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleDependencyConfigurationElement"/> with initial list of dependencies.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleDependencyCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleDependencyConfigurationElement"/>.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleDependencyConfigurationElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleDependencyCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for. </param>
            <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleDependencyCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
            <value>
            The <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> of this collection.
            </value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleDependencyCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <value>
            The name of the collection; otherwise, an empty string.
            </value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleDependencyCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleDependencyConfigurationElement"/> located at the specified index in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleDependencyConfigurationElement"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Composite.Regions.IViewsCollection">
            <summary>
            Defines a view of a collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Regions.IViewsCollection.Contains(System.Object)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="value">The object to locate in the collection.</param>
            <returns><see langword="true" /> if <paramref name="value"/> is found in the collection; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:Microsoft.Practices.Composite.Events.EventAggregator">
            <summary>
            Implements <see cref="T:Microsoft.Practices.Composite.Events.IEventAggregator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Composite.Events.IEventAggregator">
            <summary>
            Defines an interface to get instances of an event type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.IEventAggregator.GetEvent``1">
            <summary>
            Gets an instance of an event type.
            </summary>
            <typeparam name="TEventType">The type of event to get.</typeparam>
            <returns>An instance of an event object of type <typeparamref name="TEventType"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.EventAggregator.GetEvent``1">
            <summary>
            Gets the single instance of the event managed by this EventAggregator. Multiple calls to this method with the same <typeparamref name="TEventType"/> returns the same event instance.
            </summary>
            <typeparam name="TEventType">The type of event to get. This must inherit from <see cref="T:Microsoft.Practices.Composite.Events.EventBase"/>.</typeparam>
            <returns>A singleton instance of an event object of type <typeparamref name="TEventType"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.ModulesConfigurationSection">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationSection"/> for module configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModulesConfigurationSection.Modules">
            <summary>
            Gets or sets the collection of modules configuration.
            </summary>
            <value>A <seealso cref="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElementCollection"/> of <seealso cref="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement"/>.</value>
        </member>
        <member name="T:Microsoft.Practices.Composite.Logging.TraceLogger">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.Composite.Logging.ILoggerFacade"/> that logs to .NET <see cref="T:System.Diagnostics.Trace"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Logging.TraceLogger.Log(System.String,Microsoft.Practices.Composite.Logging.Category,Microsoft.Practices.Composite.Logging.Priority)">
            <summary>
            Write a new log entry with the specified category and priority.
            </summary>
            <param name="message">Message body to log.</param>
            <param name="category">Category of the entry.</param>
            <param name="priority">The priority of the entry.</param>
        </member>
        <member name="T:Microsoft.Practices.Composite.Logging.Priority">
            <summary>
            Defines values for the priorities used by <see cref="T:Microsoft.Practices.Composite.Logging.ILoggerFacade"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Composite.Logging.Priority.None">
            <summary>
            No priority specified.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Composite.Logging.Priority.High">
            <summary>
            High priority entry.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Composite.Logging.Priority.Medium">
            <summary>
            Medium priority entry.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Composite.Logging.Priority.Low">
            <summary>
            Low priority entry.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Composite.Events.SubscriptionToken">
            <summary>
            Subsription token returned from <see cref="T:Microsoft.Practices.Composite.Events.EventBase"/> on subscribe.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.SubscriptionToken.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Events.SubscriptionToken"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.SubscriptionToken.Equals(Microsoft.Practices.Composite.Events.SubscriptionToken)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.SubscriptionToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.SubscriptionToken.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement">
            <summary>
            A configuration element to declare module metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement"/>.
            </summary>
            <param name="assemblyFile">The assembly file where the module is located.</param>
            <param name="moduleType">The type of the module.</param>
            <param name="moduleName">The name of the module.</param>
            <param name="startupLoaded">This attribute specifies whether the module is loaded at startup.</param>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement.AssemblyFile">
            <summary>
            Gets or sets the assembly file.
            </summary>
            <value>The assembly file.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement.ModuleType">
            <summary>
            Gets or sets the module type.
            </summary>
            <value>The module's type.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement.ModuleName">
            <summary>
            Gets or sets the module name.
            </summary>
            <value>The module's name.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement.StartupLoaded">
            <summary>
            Gets or sets a value indicating whether the module should be loaded at startup.
            </summary>
            <value>A value indicating whether the module should be loaded at startup.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement.Dependencies">
            <summary>
            Gets or sets the modules this module depends on.
            </summary>
            <value>The names of the modules that this depends on.</value>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.DirectoryLookupModuleEnumerator">
            <summary>
            Implements a <see cref="T:Microsoft.Practices.Composite.Modularity.IModuleEnumerator"/> that gets the module metadata by examining all the assemblies located in a specified path.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.DirectoryLookupModuleEnumerator.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.DirectoryLookupModuleEnumerator"/>.
            </summary>
            <param name="path">The path to look for assemblies with module metadata.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.DirectoryLookupModuleEnumerator.GetModules">
            <summary>
            Gets a list of metadata information of the modules in the specified path.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.DirectoryLookupModuleEnumerator.GetStartupLoadedModules">
            <summary>
            Gets a list of metadata information of the modules that should be loaded at startup in the specified path.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.DirectoryLookupModuleEnumerator.GetModule(System.String)">
            <summary>
            Gets the metadata information of a module by its name in the specified path.
            </summary>
            <param name="moduleName">The module's name.</param>
            <returns>A <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleInfo"/> associated with the <paramref name="moduleName"/> parameter.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.DirectoryLookupModuleEnumerator.BuildChildDomain(System.AppDomain)">
            <summary>
            Creates a new child domain and copies the evidence from a parent domain.
            </summary>
            <param name="parentDomain">The parent domain.</param>
            <returns>The new child domain.</returns>
            <remarks>
            Grabs the <paramref name="parentDomain"/> evidence and uses it to construct the new
            <see cref="T:System.AppDomain"/> because in a ClickOnce execution environment, creating an
            <see cref="T:System.AppDomain"/> will by default pick up the partial trust environment of 
            the AppLaunch.exe, which was the root executable. The AppLaunch.exe does a 
            create domain and applies the evidence from the ClickOnce manifests to 
            create the domain that the application is actually executing in. This will 
            need to be Full Trust for Composite Application Library applications.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.ModuleDependencySolver">
            <summary>
            Used by <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleLoader"/> to get the load sequence
            for the modules to load according to their dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleDependencySolver.AddModule(System.String)">
            <summary>
            Adds a module to the solver.
            </summary>
            <param name="name">The name that uniquely identifies the module.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleDependencySolver.AddDependency(System.String,System.String)">
            <summary>
            Adds a module dependency between the modules specified by dependingModule and
            dependentModule.
            </summary>
            <param name="dependingModule">The name of the module with the dependency.</param>
            <param name="dependentModule">The name of the module dependingModule
            depends on.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleDependencySolver.Solve">
            <summary>
            Calculates an ordered vector according to the defined dependencies.
            Non-dependant modules appears at the beginning of the resulting array.
            </summary>
            <returns>The resulting ordered list of modules.</returns>
            <exception cref="T:Microsoft.Practices.Composite.Modularity.CyclicDependencyFoundException">This exception is thrown
            when a cycle is found in the defined depedency graph.</exception>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleDependencySolver.ModuleCount">
            <summary>
            Gets the number of modules added to the solver.
            </summary>
            <value>The number of modules.</value>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.ModuleDependencyAttribute">
            <summary>
            Specifies that the current module has a dependency on another module. This attribute should be used on classes that implement <see cref="T:Microsoft.Practices.Composite.Modularity.IModule"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleDependencyAttribute"/>.
            </summary>
            <param name="moduleName">The name of the module that this module is dependant upon.</param>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleDependencyAttribute.ModuleName">
            <summary>
            Gets the name of the module that this module is dependant upon.
            </summary>
            <value>The name of the module that this module is dependant upon.</value>
        </member>
        <member name="T:Microsoft.Practices.Composite.Logging.EmptyLogger">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.Composite.Logging.ILoggerFacade"/> that does nothing. This
            implementation is useful when the application does not need logging
            but there are infrastructure pieces that assume there is a logger.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Logging.EmptyLogger.Log(System.String,Microsoft.Practices.Composite.Logging.Category,Microsoft.Practices.Composite.Logging.Priority)">
            <summary>
            This method does nothing.
            </summary>
            <param name="message">Message body to log.</param>
            <param name="category">Category of the entry.</param>
            <param name="priority">The priority of the entry.</param>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.ModuleLoader">
            <summary>
            Implements the <see cref="T:Microsoft.Practices.Composite.Modularity.IModuleLoader"/> interface. Handles initialization of a set of modules based on types.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.IModuleLoader">
            <summary>
            Declares a service which initializes the modules into the application.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.IModuleLoader.Initialize(Microsoft.Practices.Composite.Modularity.ModuleInfo[])">
            <summary>
            Initializes the specified list of modules.
            </summary>
            <param name="moduleInfos">The list of modules to initialize.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleLoader.#ctor(Microsoft.Practices.Composite.IContainerFacade,Microsoft.Practices.Composite.Logging.ILoggerFacade)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleLoader"/>.
            </summary>
            <param name="containerFacade">The container that will be used to resolve the modules by specifying its type.</param>
            <param name="loggerFacade">The logger to use.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleLoader.Initialize(Microsoft.Practices.Composite.Modularity.ModuleInfo[])">
            <summary>
            Initialize the specified list of modules.
            </summary>
            <param name="moduleInfos">The list of modules to initialize.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleLoader.CreateModule(System.Type)">
            <summary>
            Uses the container to resolve a new <see cref="T:Microsoft.Practices.Composite.Modularity.IModule"/> by specifying its <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to resolve. This type must implement <see cref="T:Microsoft.Practices.Composite.Modularity.IModule"/>.</param>
            <returns>A new instance of <paramref name="type"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleLoader.LoadAssembly(Microsoft.Practices.Composite.Modularity.ModuleInfo)">
            <summary>
            Loads an assembly based on the information in the specified <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleInfo"/>.
            </summary>
            <param name="moduleInfo">The information that describes what assembly to load.</param>
            <returns>The loaded assembly.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleLoader.HandleModuleLoadError(Microsoft.Practices.Composite.Modularity.ModuleInfo,System.String,System.Exception)">
            <summary>
            Handles any exception ocurred in the module loading process,
            logs the error using the <seealso cref="T:Microsoft.Practices.Composite.Logging.ILoggerFacade"/> and throws a <seealso cref="T:Microsoft.Practices.Composite.Modularity.ModuleLoadException"/>.
            This method can be overriden to provide a different behavior. 
            </summary>
            <param name="moduleInfo">The module metadata where the error happenened.</param>
            <param name="assemblyName">The assembly name.</param>
            <param name="exception">The exception thrown that is the cause of the current error.</param>
            <exception cref="T:Microsoft.Practices.Composite.Modularity.ModuleLoadException"></exception>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleLoader.LoadedAssemblies">
            <summary>
            Gets the loaded assemblies. This property is used for testability and it is not intended to be used by inheritors.
            </summary>
            <value>A <seealso cref="T:System.Collections.Generic.IDictionary`2"/> with the loaded asemblies.</value>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.ModuleInfo">
            <summary>
            Defines the metadata that describes a module.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleInfo.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleInfo"/>.
            </summary>
            <param name="assemblyFile">The assembly file. Must be different than <see langword="null"/>.</param>
            <param name="moduleType">The module's type.</param>
            <param name="moduleName">The module's name.</param>
            <param name="dependsOn">The names of the modules that this depends on.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleInfo.#ctor(System.String,System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleInfo"/>.
            </summary>
            <param name="assemblyFile">The assembly file. Must be different than <see langword="null"/>.</param>
            <param name="moduleType">The module's type.</param>
            <param name="moduleName">The module's name.</param>
            <param name="startupLoaded">Indicates whether this module should be loaded on startup.</param>
            <param name="dependsOn">The names of the modules that this depends on.</param>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleInfo.AssemblyFile">
            <summary>
            Gets the assembly file where the module is located.
            </summary>
            <value>The assembly file where the module is located.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleInfo.ModuleType">
            <summary>
            Gets the type of the module.
            </summary>
            <value>The type of the module.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleInfo.ModuleName">
            <summary>
            Gets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleInfo.DependsOn">
            <summary>
            Gets the list of modules that this module depends upon.
            </summary>
            <value>The list of modules that this module depends upon.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleInfo.StartupLoaded">
            <summary>
            Gets a value indicating whether the module should be loaded at startup. 
            </summary>
            <value>A <see langword="bool"/> value indicating whether the module should be loaded at startup.</value>
        </member>
        <member name="T:Microsoft.Practices.Composite.Events.IEventSubscription">
            <summary>
             Defines a contract for an event subscription to be used by <see cref="T:Microsoft.Practices.Composite.Events.EventBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.IEventSubscription.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null"/> if the <see cref="T:Microsoft.Practices.Composite.Events.IEventSubscription"/> is no longer valid.</returns>
        </member>
        <member name="P:Microsoft.Practices.Composite.Events.IEventSubscription.SubscriptionToken">
            <summary>
            Gets or sets a <see cref="T:Microsoft.Practices.Composite.Events.SubscriptionToken"/> that identifies this <see cref="T:Microsoft.Practices.Composite.Events.IEventSubscription"/>.
            </summary>
            <value>A token that identifies this <see cref="T:Microsoft.Practices.Composite.Events.IEventSubscription"/>.</value>
        </member>
        <member name="T:Microsoft.Practices.Composite.Events.EventBase">
            <summary>
             Defines a base class to publish and subscribe to events.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.EventBase.InternalSubscribe(Microsoft.Practices.Composite.Events.IEventSubscription)">
            <summary>
            Adds the specified <see cref="T:Microsoft.Practices.Composite.Events.IEventSubscription"/> to the subscribers' collection.
            </summary>
            <param name="eventSubscription">The subscriber.</param>
            <returns>The <see cref="T:Microsoft.Practices.Composite.Events.SubscriptionToken"/> that uniquely identifies every subscriber.</returns>
            <remarks>
            Adds the subscription to the internal list and assigns it a new <see cref="T:Microsoft.Practices.Composite.Events.SubscriptionToken"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.EventBase.InternalPublish(System.Object[])">
            <summary>
            Calls all the execution strategies exposed by the list of <see cref="T:Microsoft.Practices.Composite.Events.IEventSubscription"/>.
            </summary>
            <param name="arguments">The arguments that will be passed to the listeners.</param>
            <remarks>Before executing the strategies, this class will prune all the subscribers from the
            list that return a <see langword="null"/> <see cref="T:System.Action`1"/> when calling the
            <see cref="M:Microsoft.Practices.Composite.Events.IEventSubscription.GetExecutionStrategy"/> method.</remarks>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.EventBase.Unsubscribe(Microsoft.Practices.Composite.Events.SubscriptionToken)">
            <summary>
            Removes the subscriber matching the <seealso cref="T:Microsoft.Practices.Composite.Events.SubscriptionToken"/>.
            </summary>
            <param name="token">The <see cref="T:Microsoft.Practices.Composite.Events.SubscriptionToken"/> returned by <see cref="T:Microsoft.Practices.Composite.Events.EventBase"/> while subscribing to the event.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.EventBase.Contains(Microsoft.Practices.Composite.Events.SubscriptionToken)">
            <summary>
            Returns <see langword="true"/> if there is a subscriber matching <see cref="T:Microsoft.Practices.Composite.Events.SubscriptionToken"/>.
            </summary>
            <param name="token">The <see cref="T:Microsoft.Practices.Composite.Events.SubscriptionToken"/> returned by <see cref="T:Microsoft.Practices.Composite.Events.EventBase"/> while subscribing to the event.</param>
            <returns><see langword="true"/> if there is a <see cref="T:Microsoft.Practices.Composite.Events.SubscriptionToken"/> that matches; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.Composite.Events.EventBase.Subscriptions">
            <summary>
            Gets the list of current subscriptions.
            </summary>
            <value>The current subscribers.</value>
        </member>
        <member name="T:Microsoft.Practices.Composite.Events.EventSubscription`1">
            <summary>
            Provides a way to retrieve a <see cref="T:System.Delegate"/> to execute an action dependending
            on the value of a second filter predicate that returns true if the action should execute.
            </summary>
            <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.EventSubscription`1.#ctor(Microsoft.Practices.Composite.Events.IDelegateReference,Microsoft.Practices.Composite.Events.IDelegateReference)">
            <summary>
             Creates a new instance of <see cref="T:Microsoft.Practices.Composite.Events.EventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.EventSubscription`1.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null"/> if the <see cref="T:Microsoft.Practices.Composite.Events.IEventSubscription"/> is no longer valid.</returns>
            <remarks>
            If <see cref="P:Microsoft.Practices.Composite.Events.EventSubscription`1.Action"/> or <see cref="P:Microsoft.Practices.Composite.Events.EventSubscription`1.Filter"/> are no longer valid because they were
            garbage collected, this method will return <see langword="null"/>.
            Otherwise it will return a delegate that evaluates the <see cref="P:Microsoft.Practices.Composite.Events.EventSubscription`1.Filter"/> and if it
            returns <see langword="true"/> will then call <see cref="M:Microsoft.Practices.Composite.Events.EventSubscription`1.InvokeAction(System.Action{`0},`0)"/>. The returned
            delegate holds hard references to the <see cref="P:Microsoft.Practices.Composite.Events.EventSubscription`1.Action"/> and <see cref="P:Microsoft.Practices.Composite.Events.EventSubscription`1.Filter"/> target
            <see cref="T:System.Delegate">delegates</see>. As long as the returned delegate is not garbage collected,
            the <see cref="P:Microsoft.Practices.Composite.Events.EventSubscription`1.Action"/> and <see cref="P:Microsoft.Practices.Composite.Events.EventSubscription`1.Filter"/> references delegates won't get collected either.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.EventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> synchronously when not overriden.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
        </member>
        <member name="P:Microsoft.Practices.Composite.Events.EventSubscription`1.Action">
            <summary>
            Gets the target <see cref="T:System.Action`1"/> that is referenced by the <see cref="T:Microsoft.Practices.Composite.Events.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Action`1"/> or <see langword="null"/> if the referenced target is not alive.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Events.EventSubscription`1.Filter">
            <summary>
            Gets the target <see cref="T:System.Predicate`1"/> that is referenced by the <see cref="T:Microsoft.Practices.Composite.Events.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Predicate`1"/> or <see langword="null"/> if the referenced target is not alive.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Events.EventSubscription`1.SubscriptionToken">
            <summary>
            Gets or sets a <see cref="T:Microsoft.Practices.Composite.Events.SubscriptionToken"/> that identifies this <see cref="T:Microsoft.Practices.Composite.Events.IEventSubscription"/>.
            </summary>
            <value>A token that identifies this <see cref="T:Microsoft.Practices.Composite.Events.IEventSubscription"/>.</value>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.CyclicDependencyFoundException">
            <summary>
            Represents the exception that is thrown when there is a circular dependency
            between modules during the module loading process.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.CyclicDependencyFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Composite.Modularity.CyclicDependencyFoundException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.CyclicDependencyFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Composite.Modularity.CyclicDependencyFoundException"/> class
            with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.CyclicDependencyFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Composite.Modularity.CyclicDependencyFoundException"/> class
            with the specified error message and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.CyclicDependencyFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Composite.Modularity.CyclicDependencyFoundException"/> class
            with the serialization data.
            </summary>
            <param name="info">Holds the serialized object data about the exception being thrown.</param>
            <param name="context">Contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.ConfigurationModuleEnumerator">
            <summary>
            Implements a <see cref="T:Microsoft.Practices.Composite.Modularity.IModuleEnumerator"/> that gets the modules metadata from
            configuration files.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ConfigurationModuleEnumerator.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.ConfigurationModuleEnumerator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ConfigurationModuleEnumerator.#ctor(Microsoft.Practices.Composite.Modularity.ConfigurationStore)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.ConfigurationModuleEnumerator"/>.
            </summary>
            <param name="store">The <see cref="T:Microsoft.Practices.Composite.Modularity.ConfigurationStore"/> to use to get the module configuration.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ConfigurationModuleEnumerator.GetModules">
            <summary>
            Gets a list of metadata information of the modules specified in the configuration files.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ConfigurationModuleEnumerator.GetStartupLoadedModules">
            <summary>
            Gets a list of metadata information of the modules that should be loaded at startup specified in the configuration files.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ConfigurationModuleEnumerator.GetModule(System.String)">
            <summary>
            Gets the metadata information of a module by its name specified in the configuration files.
            </summary>
            <param name="moduleName">The module's name.</param>
            <returns>A <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleInfo"/> associated with the <paramref name="moduleName"/> parameter.</returns>
        </member>
        <member name="T:Microsoft.Practices.Composite.Logging.Category">
            <summary>
            Defines values for the categories used by <see cref="T:Microsoft.Practices.Composite.Logging.ILoggerFacade"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Composite.Logging.Category.Debug">
            <summary>
            Debug category.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Composite.Logging.Category.Exception">
            <summary>
            Exception category.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Composite.Logging.Category.Info">
            <summary>
            Informational category.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Composite.Logging.Category.Warn">
            <summary>
            Warning category.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Composite.Regions.IRegion">
            <summary>
            Defines a model that can be used to compose views.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Regions.IRegion.Add(System.Object)">
            <overloads>Adds a new view to the region.</overloads>
             <summary>
             Adds a new view to the region.
             </summary>
             <param name="view">The view to add.</param>
             <returns>The <see cref="T:Microsoft.Practices.Composite.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Regions.IRegion.Add(System.Object,System.String)">
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <param name="viewName">The name of the view. This can be used to retrieve it later by calling <see cref="M:Microsoft.Practices.Composite.Regions.IRegion.GetView(System.String)"/>.</param>
            <returns>The <see cref="T:Microsoft.Practices.Composite.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Regions.IRegion.Add(System.Object,System.String,System.Boolean)">
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <param name="viewName">The name of the view. This can be used to retrieve it later by calling <see cref="M:Microsoft.Practices.Composite.Regions.IRegion.GetView(System.String)"/>.</param>
            <param name="createRegionManagerScope">When <see langword="true"/>, the added view will receive a new instance of <see cref="T:Microsoft.Practices.Composite.Regions.IRegionManager"/>, otherwise it will use the current region manager for this region.</param>
            <returns>The <see cref="T:Microsoft.Practices.Composite.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Regions.IRegion.Remove(System.Object)">
            <summary>
            Removes the specified view from the region.
            </summary>
            <param name="view">The view to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Regions.IRegion.Activate(System.Object)">
            <summary>
            Marks the specified view as active. 
            </summary>
            <param name="view">The view to activate.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Regions.IRegion.Deactivate(System.Object)">
            <summary>
            Marks the specified view as inactive. 
            </summary>
            <param name="view">The view to deactivate.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Regions.IRegion.GetView(System.String)">
            <summary>
            Returns the view instance that was added to the region using a specific name.
            </summary>
            <param name="viewName">The name used when adding the view to the region.</param>
            <returns>Returns the named view or <see langword="null"/> if the view with <paramref name="viewName"/> does not exist in the current region.</returns>
        </member>
        <member name="P:Microsoft.Practices.Composite.Regions.IRegion.Views">
            <summary>
            Gets a readonly view of the collection of views in the region.
            </summary>
            <value>An <see cref="T:Microsoft.Practices.Composite.Regions.IViewsCollection"/> of all the added views.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Regions.IRegion.ActiveViews">
            <summary>
            Gets a readonly view of the collection of all the active views in the region.
            </summary>
            <value>An <see cref="T:Microsoft.Practices.Composite.Regions.IViewsCollection"/> of all the active views.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Regions.IRegion.RegionManager">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Practices.Composite.Regions.IRegionManager"/> that will be passed to the views when adding them to the region, unless the view is added by specifying createRegionManagerScope as <see langword="true"/>.
            </summary>
            <value>The <see cref="T:Microsoft.Practices.Composite.Regions.IRegionManager"/> where this <see cref="T:Microsoft.Practices.Composite.Regions.IRegion"/> is registered.</value>
            <remarks>This is usually used by implementations of <see cref="T:Microsoft.Practices.Composite.Regions.IRegionManager"/> and should not be
            used by the developer explicitely.</remarks>
        </member>
        <member name="T:Microsoft.Practices.Composite.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.Properties.Resources.DefaultTextLoggerPattern">
            <summary>
              Looks up a localized string similar to {1}: {2}. Priority: {3}. Timestamp:{0:u}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.Properties.Resources.DependencyForUnknownModule">
            <summary>
              Looks up a localized string similar to Cannot add dependency for unknown module {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.Properties.Resources.DependencyOnMissingModule">
            <summary>
              Looks up a localized string similar to A module declared a dependency on another module which is not declared to be loaded. Missing module(s): {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.Properties.Resources.DirectoryNotFound">
            <summary>
              Looks up a localized string similar to Directory {0} was not found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.Properties.Resources.DuplicatedModule">
            <summary>
              Looks up a localized string similar to A duplicated module with name {0} has been found by the loader..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.Properties.Resources.FailedToLoadModule">
             <summary>
               Looks up a localized string similar to Failed to load module {0} from assembly {1}. Error was:
            {2}.
             </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.Properties.Resources.InvalidDelegateRerefenceTypeException">
            <summary>
              Looks up a localized string similar to The Target of the IDelegateReference should be of type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.Properties.Resources.ModuleNotFound">
            <summary>
              Looks up a localized string similar to Assembly file {0} was not found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.Properties.Resources.StringCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to The provided String argument {0} must not be null or empty..
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.ModuleLoadException">
            <summary>
            Exception thrown by <see cref="T:Microsoft.Practices.Composite.Modularity.IModuleLoader"/> implementations whenever 
            a module fails to load.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleLoadException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleLoadException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleLoadException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes the exception with a particular module and error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleAssembly">The assembly where the module is located.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleLoadException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception 
            that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleAssembly">The assembly where the module is located.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElementCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElementCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElementCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElementCollection.#ctor(Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement[])">
            <summary>
            Initializes a new <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElementCollection"/>.
            </summary>
            <param name="modules">The initial set of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElementCollection.Add(Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement"/> to the collection.
            </summary>
            <param name="module">A <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement"/> instance.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElementCollection.Contains(System.String)">
            <summary>
            Tests if the collection contains the configuration for the specified module name.
            </summary>
            <param name="moduleName">The name of the module to search the configuration for.</param>
            <returns><see langword="true"/> if a configuration for the module is present; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElementCollection.FindAll(System.Predicate{Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement})">
            <summary>
            Searches the collection for all the <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement"/> that match the specified predicate.
            </summary>
            <param name="match">A <see cref="T:System.Predicate`1"/> that implements the match test.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> with the successful matches.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElementCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement"/>.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for. </param>
            <returns>
            An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElementCollection.ThrowOnDuplicate">
            <summary>
            Gets a value indicating whether an exception should be raised if a duplicate element is found.
            This property will always return true.
            </summary>
            <value>A <see cref="T:System.Boolean"/> value.</value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElementCollection.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection" />.
            </summary>
            <value>
            The <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> of this collection.
            </value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElementCollection.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <value>
            The name of the collection; otherwise, an empty string.
            </value>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElementCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement"/> located at the specified index in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleConfigurationElement"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Composite.Events.IDelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Composite.Events.IDelegateReference.Target">
            <summary>
            Gets the referenced <see cref="T:System.Delegate"/> object.
            </summary>
            <value>A <see cref="T:System.Delegate"/> instance if the target is valid; otherwise <see langword="null"/>.</value>
        </member>
        <member name="T:Microsoft.Practices.Composite.Regions.IRegionManager">
            <summary>
            Defines an interface to manage a set of <see cref="T:Microsoft.Practices.Composite.Regions.IRegion">regions</see> and to attach regions to objects (typically controls).
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Regions.IRegionManager.AttachNewRegion(System.Object,System.String)">
            <summary>
            Attaches a region to an object and adds it to the region manager.
            </summary>
            <param name="regionTarget">The object to adapt. This is typically a container (i.e a control).</param>
            <param name="regionName">The name of the region to register.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Regions.IRegionManager.CreateRegionManager">
            <summary>
            Creates a new region manager.
            </summary>
            <returns>A new region manager that can be used as a different scope from the current region manager.</returns>
        </member>
        <member name="P:Microsoft.Practices.Composite.Regions.IRegionManager.Regions">
            <summary>
            Gets a dictionary of <see cref="T:Microsoft.Practices.Composite.Regions.IRegion"/> that identify each region by name. You can use this dictionary to add or remove regions to the current region manager.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.IModule">
            <summary>
            Defines the contract for the modules deployed in the application.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.IModule.Initialize">
            <summary>
            Notifies the module that it has be initialized.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Composite.Events.DelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/> that may contain a
            <see cref="T:System.WeakReference"/> to the target. This class is used
            internally by the Composite Application Library.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.DelegateReference.#ctor(System.Delegate,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Events.DelegateReference"/>.
            </summary>
            <param name="delegate">The original <see cref="T:System.Delegate"/> to create a reference for.</param>
            <param name="keepReferenceAlive">If <see langword="false"/> the class will create a weak reference to the delegate, allowing it to be garbage collected. Otherwise it will keep a strong reference to the target.</param>
            <exception cref="T:System.ArgumentNullException">If the passed <paramref name="delegate"/> is not assignable to <see cref="T:System.Delegate"/>.</exception>
        </member>
        <member name="P:Microsoft.Practices.Composite.Events.DelegateReference.Target">
            <summary>
            Gets the <see cref="T:System.Delegate"/> (the target) referenced by the current <see cref="T:Microsoft.Practices.Composite.Events.DelegateReference"/> object.
            </summary>
            <value><see langword="null"/> if the object referenced by the current <see cref="T:Microsoft.Practices.Composite.Events.DelegateReference"/> object has been garbage collected; otherwise, a reference to the <see cref="T:System.Delegate"/> referenced by the current <see cref="T:Microsoft.Practices.Composite.Events.DelegateReference"/> object.</value>
        </member>
        <member name="T:Microsoft.Practices.Composite.Events.BackgroundEventSubscription`1">
            <summary>
             Extends <see cref="T:Microsoft.Practices.Composite.Events.EventSubscription`1"/> to invoke the <see cref="P:Microsoft.Practices.Composite.Events.EventSubscription`1.Action"/> delegate in a background thread.
            </summary>
             <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.BackgroundEventSubscription`1.#ctor(Microsoft.Practices.Composite.Events.IDelegateReference,Microsoft.Practices.Composite.Events.IDelegateReference)">
            <summary>
             Creates a new instance of <see cref="T:Microsoft.Practices.Composite.Events.BackgroundEventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.BackgroundEventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> in an asynchronous thread by using a <see cref="T:System.ComponentModel.BackgroundWorker"/>.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
        </member>
        <member name="T:Microsoft.Practices.Composite.Regions.IRegionAdapter">
            <summary>
            Defines an interfaces to adapt an object and bind it to a new <see cref="T:Microsoft.Practices.Composite.Regions.IRegion"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Regions.IRegionAdapter.Initialize(System.Object)">
            <summary>
            Adapts an object and binds it to a new <see cref="T:Microsoft.Practices.Composite.Regions.IRegion"/>.
            </summary>
            <param name="regionTarget">The object to adapt.</param>
            <returns>The new instance of <see cref="T:Microsoft.Practices.Composite.Regions.IRegion"/> that the <paramref name="regionTarget"/> is bound to.</returns>
        </member>
        <member name="T:Microsoft.Practices.Composite.Modularity.ModuleDependencyConfigurationElement">
            <summary>
            A <see cref="T:System.Configuration.ConfigurationElement"/> for module dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleDependencyConfigurationElement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleDependencyConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Modularity.ModuleDependencyConfigurationElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Modularity.ModuleDependencyConfigurationElement"/>.
            </summary>
            <param name="moduleName">A module name.</param>
        </member>
        <member name="P:Microsoft.Practices.Composite.Modularity.ModuleDependencyConfigurationElement.ModuleName">
            <summary>
            Gets or sets the name of a module antoher module depends on.
            </summary>
            <value>The name of a module antoher module depends on.</value>
        </member>
        <member name="T:Microsoft.Practices.Composite.Logging.TextLogger">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.Composite.Logging.ILoggerFacade"/> that logs into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Logging.TextLogger.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Logging.TextLogger"/> that writes to
            the console output.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Composite.Logging.TextLogger.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Composite.Logging.TextLogger"/>.
            </summary>
            <param name="writer">The writer to use for writing log entries.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Logging.TextLogger.Log(System.String,Microsoft.Practices.Composite.Logging.Category,Microsoft.Practices.Composite.Logging.Priority)">
            <summary>
            Write a new log entry with the specified category and priority.
            </summary>
            <param name="message">Message body to log.</param>
            <param name="category">Category of the entry.</param>
            <param name="priority">The priority of the entry.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Logging.TextLogger.Dispose(System.Boolean)">
            <summary>
            Disposes the associated <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="disposing">When <see langword="true"/>, disposes the associated <see cref="T:System.IO.TextWriter"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.Composite.Logging.TextLogger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
             <remarks>Calls <see cref="M:Microsoft.Practices.Composite.Logging.TextLogger.Dispose(System.Boolean)"/></remarks>.
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Microsoft.Practices.Composite.Events.DataEventArgs`1">
            <summary>
            Generic arguments class to pass to event handlers that need to receive data.
            </summary>
            <typeparam name="TData">The type of data to pass.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Composite.Events.DataEventArgs`1.#ctor(`0)">
            <summary>
            Initializes the DataEventArgs class.
            </summary>
            <param name="value">Information related to the event.</param>
        </member>
        <member name="P:Microsoft.Practices.Composite.Events.DataEventArgs`1.Value">
            <summary>
            Gets the information related to the event.
            </summary>
            <value>Information related to the event.</value>
        </member>
    </members>
</doc>
